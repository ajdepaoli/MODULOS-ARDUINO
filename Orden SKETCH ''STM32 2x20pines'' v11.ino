// ########### DATOS INICIALES ###########
// Nombre: aca va el nombre
// Programa para: nnnnnnnnnnn
// M√≥dulo: STM32F103C8T6 (128K)
// Creador y programador: Alejandro Jorge Depaoli
// Ayudante: 
// Fecha de Inicializacion: Fecha
// Versi√≥n: nnnnnn
// Ultima Revisi√≥n: xx/06/2025
//
// ### PARAMETROS B√°sicos para "ARDUINO-IDE" -> STM32F103C8T6 Blue Pill <- por ST-LINK V2 ###
// NOTA en la PCB los pines de BOOT deben estar ambos es "0"
// Placa: "Generic STM32F1 series"								>	SELECIONAR este ITEM
// Puerto: "COMx"												[seg√∫n sea el que se use]
// Reload Board Data											>	¬° ¬° ¬° O J O ! ! ! Desconfigura todo
// Obtener informaci√≥n de la placa
// ------------
// Debug symbols and core logs: "None"							>	Por ahora sin DEBUG
// Optimize: "Faster (-02) with LT"								>	Termino Medio para la Compilaci√≥n 
// Board part number: "BluePill F103CB (or C8 with 128k)"		> 	SELECIONAR este ITEM ¬° ¬° ¬° O J O ! ! ! el AZUL
// C Runtime Library: "Newlib Nano (default)"					>	Sin uso de la CONSOLA
// Upload method: "STM32CubeProgrammer (SWD)"					>	SELECIONAR este ITEM para ST-LINK
// USB support (if available): "None"							>	Conexi√≥n por ST-LINK
// U(S)ART support: "Disabled (no Serial support)"				>	Conexi√≥n por ST-LINK y Sin uso de la CONSOLA
// USB speed (if available): "Low/Full Speed"					>	Conexi√≥n por ST-LINK, sin importancia
//
// ### PARAMETROS B√°sicos para "ARDUINO-IDE" -> STM32F103C8T6 Blue Pill <- por USB ###
// NOTA en la PCB los pines de BOOT deben estar ¬ø¬ø¬ø¬ø?????
// Placa: "Generic STM32F1 series"								>	SELECIONAR este ITEM
//
// 
//
//
//  –ñ –ñ –ñ –ñ –ñ –ñ –ñ CONFIGURACI√ìN DE PAR√ÅMETROS INICIALES  –ñ –ñ –ñ –ñ –ñ –ñ –ñ
// Declaraci√≥n e inicializaci√≥n de bibliotecas, variables, E/S, funciones y otros recursos
//
//
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê I N D I C E ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// IA00 ‚Üí BIBLIOTECAS
//   IA01 ‚Üí Tiempo y Sistema (delay, timers, FreeRTOS, bajo consumo)
//   IA02 ‚Üí Memoria / EEPROM
//   IA03 ‚Üí Funciones Est√°ndar (stdlib, string, math)
//   IA04 ‚Üí Comunicaciones (I¬≤C, SPI, Serial, etc.)
//   IA05 ‚Üí Perif√©ricos y Pantallas (LCD, OLED, Servo)
//
// IB00 ‚Üí DEFINICI√ìN de los PINES
//  IB01 ‚Üí Entradas digitales
//  IB02 ‚Üí Salidas digitales
//  IB03 ‚Üí Entradas anal√≥gicas (ADC_IN)
//  IB04 ‚Üí Comparaci√≥n anal√≥gica por software
//  IB05 ‚Üí Salidas anal√≥gicas (DAC emulado por PWM)
//  IB06 ‚Üí Salidas PWM
//  IB07 ‚Üí Pines de Comunicaci√≥n (UART, SPI, I¬≤C‚Ä¶)
//  IB08 ‚Üí Interrupciones externas (EXTI)
//  IB09 ‚Üí Timers por hardware
//  IB10 ‚Üí Bootloader y Programaci√≥n
//  IB11 ‚Üí Alimentaci√≥n
//  IB12 ‚Üí Referencias ADC internas (VREFINT, Temp)
//
// IC00 ‚Üí VARIABLES
//    IC01 ‚Üí OBJETO GLOBALES
//    IC02 ‚Üí ESCALARES GLOBALES
//    IC03 ‚Üí LISTAS
//    IC04 ‚Üí ESCALARES LOCALES
//
// ID00 ‚Üí CONSTANTES Y MACROS
//    ID01 ‚Üí Constantes literales (const, #define)
//    ID02 ‚Üí Enumeraciones (enum)
//    ID03 ‚Üí Macros complejas
//
// IE00 ‚Üí SUBRUTINAS
//   IE01 ‚Üí EEPROM (guardar y recuperar)
//   IE02 ‚Üí Uso √önico (setup o llamada 1 vez)
//   IE03 ‚Üí 2¬∫ Plano Permanente
//   IE04 ‚Üí 2¬∫ Plano No Permanente (Timers, ISR)
//   IE05 ‚Üí Subrutinas de Uso Com√∫n
//
// IF00 ‚Üí setup()
//
// IG00 ‚Üí loop()
//
// IH00 ‚Üí DOCUMENTACI√ìN Y NOTAS
//
//
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// NOTAS:
//	- Pod√©s reducir o eliminar partes del √≠ndice una vez armado el SKETCH final.
//	- Las etiquetas tipo IA01 a IH00 ayudan a navegar el archivo desde editores simples.
//	- "//```Cpp" y al final "```", te ayudan para trabajar con la IA.
//	- En este SKETCH dej√© el Indice completo, por si te sirve de ayuda para el futuro
//	- Este INDICE puede ir cambiando, voy a dejar actualizaciones a medida que vaya creciendo mi conocimiento.
//	- NO se ha usado la funci√≥n bloqueante 'delay()', todos los tiempos se trabajan con millis(),
//		puede que se un poco m√°s compleja, pero usar 'delay()' puede crear atascos tiempos.
//
//```Cpp
//
// IA00
// –ñ –ñ –ñ –ñ –ñ --- BIBLIOTECAS --- –ñ –ñ –ñ –ñ –ñ
//
// IA01
// –ñ –ñ –ñ --- TIEMPO Y SISTEMA --- –ñ –ñ –ñ
// Para delays precisos usar delay(), delayMicroseconds(), o HardwareTimer
#include <STM32FreeRTOS.h>           // ‚è±Ô∏è Opcional: Multitarea (FreeRTOS) en placas STM32
#include <STM32LowPower.h>           // üîã Sleep / deepSleep / wakeUpTime para bajo consumo
//
// IA02
// –ñ –ñ –ñ --- MEMORIA Y ALMACENAMIENTO --- –ñ –ñ –ñ
#include <EEPROM.h>              // Acceso sencillo a EEPROM -- "Usable con core Arduino moderno (simulada en Flash)"
//
// IA03
// –ñ –ñ –ñ --- FUNCIONES EST√ÅNDAR (LIBC) --- –ñ –ñ –ñ
#include <stdlib.h>              // malloc(), free(), rand(), atoi(), etc.
#include <string.h>              // strcpy(), strcmp(), memset(), etc.
#include <math.h>                // sin(), cos(), sqrt(), pow(), etc. -- (hardware FPU en algunos modelos)
//
// IA04
// –ñ –ñ –ñ --- COMUNICACIONES --- –ñ –ñ –ñ
#include <Wire.h>                // I¬≤C: sensores, RTC, expanders
#include <SPI.h>                 // SPI: memorias, pantallas, etc. -- ver item "–ñ –ñ –ñ PINES de: COMUNICACION –ñ –ñ –ñ"
#include <SoftwareSerial.h>      // UART adicional por software -- OJO -- Funciona solo en algunas PCB's. Usar "HardwareSerial"
// HardwareSerial Serial1(PA10, PA9);   // Ejemplo de puerto UART1 en STM32 (RX, TX)
//
// IA05
// –ñ –ñ –ñ --- PERIF√âRICOS Y DISPLAYS --- ###
#include <LiquidCrystal.h>       // LCD est√°ndar (HD44780) -- Compatible para LCD paralelo requiere 6 pines GPIO
#include <LiquidCrystal_I2C.h>   // ‚úÖ LCD I¬≤C -- Autor: Frank de Brabander ‚Äî para m√≥dulos con PCF8574
#include <Servo.h>               // Control de servomotores (PWM)  -- Compatible (usando Timer internos STM32)
#include <Adafruit_GFX.h>        // üé® Base para displays gr√°ficos (opcional)
#include <Adafruit_SSD1306.h>    // üñ•Ô∏è OLED 128x64 (opcional)
//
//
//
// "IB00"
// –ñ –ñ –ñ –ñ –ñ –ñ –ñ --- DEFINICI√ìN de los PINES (ENTRADAS y SALIDAS) --- –ñ –ñ –ñ –ñ –ñ –ñ –ñ
//
// "IB01"
// –ñ –ñ –ñ SALIDAS DIGITALES Low/High o 0V/3.3V –ñ –ñ –ñ
// NOTA: En STM32 los niveles l√≥gicos son 0V = Low y 3.3V = High (NO toleran 5V en general)
// Por lo general se usa "digitalRead(PXx)" con el nombre definido en el pin mapping
// EJ.: Define el pin con el nombre "NV_inD0", donde: 
//      "NV" = Nombre de la Variable
//      "_in" = subtipo funcional de la variable
//      "D0" = entrada Digital N¬∫ 0
//		"PNx": "PAx" o "PBx"  = donde "Nx" es el nombre del pin en M√≥dulo STM32
// ‚ö†Ô∏è IMPORTANTE: Las entradas digitales NO toleran 5‚ÄØV directamente
//		Usar divisor resistivo y zener limitante si se conecta a salidas TTL de 5VCC.
// Definici√≥n      		// Descripci√≥n o perif√©rico asociado
#define NV_inD0 PA0		// Entrada digital 0	‚Äî	ADC_IN0, TIM2_CH1, WKUP
#define NV_inD1 PA1		// Entrada digital 1	‚Äî	ADC_IN1, TIM2_CH2
#define NV_inD2 PA2		// Entrada digital 2	‚Äî	ADC_IN2, USART2_TX, TIM2_CH3
#define NV_inD3 PA3		// Entrada digital 3	‚Äî	ADC_IN3, USART2_RX, TIM2_CH4
#define NV_inD4 PA4		// Entrada digital 4	‚Äî	ADC_IN4, SPI1_NSS
#define NV_inD5 PA5		// Entrada digital 5	‚Äî	ADC_IN5, SPI1_SCK, TIM2_CH1
#define NV_inD6 PA6		// Entrada digital 6	‚Äî	ADC_IN6, SPI1_MISO, TIM3_CH1
#define NV_inD7 PA7		// Entrada digital 7	‚Äî	ADC_IN7, SPI1_MOSI, TIM3_CH2
#define NV_inD8 PB0		// Entrada digital 8	‚Äî	ADC_IN8, TIM3_CH3
#define NV_inD9 PB1		// Entrada digital 9	‚Äî	ADC_IN9, TIM3_CH4
// Se pueden definir otros Pines como Entrada, estos son los que est√°n por defecto. Verificarlo con el DATASHEET.
//
//
// "IB02"
// –ñ –ñ –ñ ENTRADAS ANALOGICAS Low/High o 0V/3.3V –ñ –ñ –ñ
// Por lo general se usa "digitalWrite(PXx, HIGH/LOW)" para la escritura del pin
// EJ.: Define el pin PNxx con el nombre "NV_outPNxx", donde: 
//      "NV" = Nombre de la Variable
//      "_out" = representa el subtipo funcional de la variable
//      "PNxx": "PAx" o "PBxx" = donde "Nxx" es el nombre del pin en M√≥dulo STM32
// Definici√≥n        		// Descripci√≥n funcional o perif√©rico asociado
#define NV_out0  PA0 		// Salida digital 0
#define NV_out1  PA1 		// Salida digital 1
#define NV_out2  PA2 		// Salida digital 2 (UART2_TX si no se usa Serial2)
#define NV_out3  PA3 		// Salida digital 3
#define NV_out4  PA4 		// Salida digital 4 (SS opcional para SPI1, puede ser otro pin)
#define NV_out5  PA5 		// Salida digital 5 (SCK si se usa SPI1)
#define NV_out6  PA6 		// Salida digital 6 (MISO opcional)
#define NV_out7  PA7 		// Salida digital 7 (MOSI si se usa SPI1)
#define NV_out8  PB0 		// Salida digital 8
#define NV_out9  PB1 		// Salida digital 9
#define NV_out10 PB10		// Salida digital 10 (UART3_TX si no se usa Serial3)
#define NV_out11 PB11		// Salida digital 11
#define NV_out12 PB12		// Salida digital 12 (SS opcional para SPI2, puede ser otro pin)
#define NV_out13 PB13		// Salida digital 13 (SCK SPI2)
#define NV_out14 PB14		// Salida digital 14 (MISO SPI2)
#define NV_out15 PB15		// Salida digital 15 (MOSI SPI2)
//
//
// "IB03"
// –ñ –ñ –ñ ENTRADAS ANALOGICAS '0V a 3.3‚ÄØV' –ñ –ñ –ñ
// ‚ö†Ô∏è IMPORTANTE: Entradas anal√≥gicas NO toleran 5‚ÄØV ‚Äî aplicar divisor resistivo si la se√±al supera 3.3‚ÄØV
// Por lo general se usa "analogRead(PNx)" para la lectura del pin
// EJ.: Define el pin Ax con el nombre "NV_inAx", donde: 
//      "NV" = Nombre de la Variable
//      "_in" = representa el subtipo funcional de la variable
//      "PAx" = donde "Ax" es el nombre del pin en M√≥dulo STM32
// Definici√≥n			// Canal ADC asociado
#define NV_inA0  PA0	// ADC_IN0
#define NV_inA1  PA1	// ADC_IN1
#define NV_inA2  PA2	// ADC_IN2
#define NV_inA3  PA3	// ADC_IN3
#define NV_inA4  PA4	// ADC_IN4
#define NV_inA5  PA5	// ADC_IN5
#define NV_inA6  PA6	// ADC_IN6
#define NV_inA7  PA7	// ADC_IN7
#define NV_inA8  PB0	// ADC_IN8
#define NV_inA9  PB1	// ADC_IN9
//
//
// "IB04"
// –ñ –ñ –ñ COMPARACI√ìN ANAL√ìGICA (por software) –ñ –ñ –ñ
// STM32F103C8T6 NO posee un comparador anal√≥gico dedicado como el ATMega328P
// Sin embargo, se puede emular la comparaci√≥n entre dos se√±ales anal√≥gicas por software:
//        Si ADC_0 > ADC_1 ‚Üí resultado l√≥gico HIGH
//        Si ADC_0 < ADC_1 ‚Üí resultado l√≥gico LOW
// EJ.: Define los pines con nombres simb√≥licos como:
#define NV_cmpAIN0 PA0   // Entrada anal√≥gica positiva (ADC_IN0)
#define NV_cmpAIN1 PA1   // Entrada anal√≥gica negativa (ADC_IN1)
// ‚öôÔ∏è Funci√≥n ejemplo para comparaci√≥n directa
bool compararAnalogicamente() {
    int ain0 = analogRead(NV_cmpAIN0);
    int ain1 = analogRead(NV_cmpAIN1);
    return (ain0 > ain1);  // true si "positivo" > "negativo"
}
// NOTAS:
// 1- Requiere inicializaci√≥n de ADC (por defecto en STM32 core)
// 2- Precisi√≥n depende de tiempo de muestreo y resoluci√≥n (12 bits = 0 a 4095)
// 3- Usar oversampling o promedio si hay ruido anal√≥gico
// 4- Alternativa: configurar interrupci√≥n si alguno supera umbral cr√≠tico
// 5- Tambi√©n existe sensor de temperatura interno si se necesita monitoreo t√©rmico
//
//
// "IB05"
// –ñ –ñ –ñ SALIDAS ANALOGICAS –ñ –ñ –ñ
// STM32F103C8T6: NO tiene DAC.
// Se puede emular con la funci√≥n "PWM", agregando filtros RC.
// Definir el nombre de la funci√≥n como "_outdac" en caso de simular una Salida Analogica.
// #define PWMx_outdac  PAx		// TIM2_CHx ‚Äî PWMx
//
//
// "IB06"
// –ñ –ñ –ñ SALIDAS PWM –ñ –ñ –ñ
// Pines PWM disponibles dependen del Timer asociado y canal
// Frecuencia PWM predeterminada var√≠a seg√∫n core. Se puede configurar por Timer si se requiere precisi√≥n
// Usar analogWrite(PXx, valor); donde valor ‚àà [0, 255]
// EJ.: Define el pin PNx con el nombre "PWMx_out PNx", donde: 
//      "PWM" = Nombre de la Variable
//      "_out" = representa el subtipo funcional de la variable
//      "PNx": "PAx" o "PBx" = donde "Nx" es el nombre del pin en M√≥dulo STM32
// Definici√≥n simb√≥lica		// Descripci√≥n funcional y origen PWM
#define PWM1_out  PA0		// TIM2_CH1 ‚Äî PWM1 (ADC conflict si se mide A0)
#define PWM2_out  PA1		// TIM2_CH2 ‚Äî PWM2
#define PWM3_out  PA2		// TIM2_CH3 ‚Äî PWM3
#define PWM4_out  PA3		// TIM2_CH4 ‚Äî PWM4
#define PWM5_out  PA6		// TIM3_CH1 ‚Äî PWM5 (compartido con SPI1_MISO)
#define PWM6_out  PA7		// TIM3_CH2 ‚Äî PWM6 (compartido con SPI1_MOSI)
#define PWM7_out  PB0		// TIM3_CH3 ‚Äî PWM7
#define PWM8_out  PB1		// TIM3_CH4 ‚Äî PWM8
// ‚ö†Ô∏è NOTAS:
// 1- Algunos de estos pines tambi√©n son entradas anal√≥gicas o pines SPI ‚Üí verificar conflictos
// 2- Para mejor resoluci√≥n o frecuencia, se puede usar control directo con HardwareTimer
// 3- PWM por software (analogWrite) solo en placas con soporte desde el core Arduino STM32
// 4- Se recomienda mantener la carga posterior al filtro RC por debajo de 10k‚Ñ¶ para evitar deformaci√≥n
// 5- Relaci√≥n de Pines PWM con Timers ‚Äî para uso con 'HardwareTimer'
//			TIM2_CH1 ‚Üí PA0     TIM2_CH2 ‚Üí PA1     TIM2_CH3 ‚Üí PA2     TIM2_CH4 ‚Üí PA3
//			TIM3_CH1 ‚Üí PA6     TIM3_CH2 ‚Üí PA7     TIM3_CH3 ‚Üí PB0     TIM3_CH4 ‚Üí PB1
//
//
// "IB07"
// –ñ –ñ –ñ COMUNICACION –ñ –ñ –ñ
// NO se DECLARAN aqu√≠, solo se toma NOTA para tenerlos en CUENTA.
// Se activan al incluirla en la BIBLIOTECA --> #nnn <NNNN.h> y llamar a NNNN.begin();
//
// –ñ –ñ SPI (Serial Peripheral Interface) –ñ –ñ
// Biblioteca --> #include <SPI.h> --> SPI.begin()
// Por defecto:
// "SCK"   --> pin: PA5		// Reloj del bus
// "MISO"  --> pin: PA6		// Entrada de datos
// "MOSI"  --> pin: PA7		// Salida de datos
// "SS"    --> pin: cualquier GPIO definido por el usuario (ej.: PA4)
//
// Opcional: usar SPI2 o redefinir SPI personalizado:
// SPIClass mySPI(SPI2, /*MISO*/ PB14, /*MOSI*/ PB15, /*SCK*/ PB13);
// mySPI.begin();
//
// –ñ –ñ I¬≤C (Wire) –ñ –ñ
// Biblioteca --> #include <Wire.h> --> Wire.begin()
// Pines por defecto del bus I¬≤C1 en Blue Pill:
// "SDA"   --> PB7
// "SCL"   --> PB6
// Nota: pueden variar seg√∫n modelo; verificar en datasheet o CubeMX
//
// –ñ –ñ UART / USART (Seriales Hardware) –ñ –ñ
// Biblioteca base ya incluida por defecto en (Arduino.h) --> Serial.begin(baudrate);
// Serial:        si est√° habilitado como CDC USB ‚Üí comunicaci√≥n por USB virtual
// Serial1 (HW):  TX = PA9 , RX = PA10
// Serial2 (HW):  TX = PA2 , RX = PA3
// Serial3 (HW):  TX = PB10, RX = PB11
//
// ¬°OJO! SoftwareSerial solo funciona en algunas placas. Mejor usar 'HardwareSerial':
// Ejemplo:
// HardwareSerial SerialX(PA10, PA9);  // RX, TX
// SerialX.begin(9600);
//
// –ñ –ñ CAN Bus –ñ –ñ
// SOLO se puede programar atravez de ST-LINK
// Requiere librer√≠a espec√≠fica, y transceptor externo (ej. MCP2551)
// CAN_RX --> PA11
// CAN_TX --> PA12
//
// –ñ –ñ USB –ñ –ñ
// Si se configura como CDC (USB virtual COM), entonces:
// "D+" --> PA12
// "D‚àí" --> PA11
// Solo disponible en Arduino-IDE si dispone de "USB support: "CDC" o "CDC no Generic Serial" "
//
//
// "IB08"
// –ñ –ñ –ñ INTERRUPCIONES EXTERNAS 'EXTI' –ñ –ñ –ñ
// NO se DECLARAN aqu√≠, solo se toma NOTA para tenerlos en CUENTA.
// Las interrupciones 'EXTI' deben configurarse en 'setup()' o mediante 'attachInterrupt()'
// EJ.: Define el pin PNx con el nombre "NV_extix PNx", donde: 
//      "NV" = Nombre de la Variable
//      "_extix" = representa el subtipo funcional de la variable con su correspondiente N¬∫.
//      "PNx": "PAx" o "PBx" = donde "Nx" es el nombre del pin en M√≥dulo STM32
// Pines compatibles con EXTI 0 a 15 (mapeables a PAx, PBx o PCx)
#define NV_exti0  PA0  // EXTI0  ‚Äî Puede usarse como 'wakeup'
#define NV_exti1  PA1  // EXTI1
#define NV_exti2  PA2  // EXTI2
#define NV_exti3  PA3  // EXTI3
#define NV_exti4  PA4  // EXTI4
#define NV_exti5  PA5  // EXTI5
#define NV_exti6  PA6  // EXTI6
#define NV_exti7  PA7  // EXTI7
#define NV_exti8  PB0  // EXTI8
#define NV_exti9  PB1  // EXTI9
// ‚ö†Ô∏è NOTA: Cada l√≠nea EXTI (0‚Äì15) solo puede estar asignada a UN pin al mismo tiempo (PAx, PBx o PCx)
// üí° attachInterrupt(digitalPinToInterrupt(PAx), ISR_function, mode);  // mode: RISING, FALLING, CHANGE
//
//
// "IB09"
// –ñ –ñ –ñ TIMERs y PWM controlados por hardware –ñ –ñ –ñ
// NO se DECLARAN aqu√≠, solo se toma NOTA para tenerlos en CUENTA como salidas PWM o controladas por hardware.
// Los canales TIMx_CHy no necesitan ser definidos aqu√≠ ‚Äî se configuran por c√≥digo o HardwareTimer
// üìç Ubicaci√≥n de declaraci√≥n e inicializaci√≥n:
// Las instancias de 'HardwareTimer' deben inicializarse en el bloque 'setup()' o en secciones dedicadas,
// 		EJEMPLO 1 de USO en 'setup()':
//  			HardwareTimer timer2(TIM2);
//   			timer2.setPWM(PA0, 1000, 0.5); // Frecuencia: 1‚ÄØkHz, Duty: 50%
// 		EJEMPLO 2 de USO en 'setup()':
//  			HardwareTimer timer2(TIM2);
//				timer2.setPWM(PA0, frecuencia_Hz, duty_0a1); // duty: valor entre 0.0 y 1.0 (ej.: 0.75 ‚Üí 75%)
// Este bloque lista los canales disponibles por Timer (uso avanzado)
// EJ.: Define el pin PNx con el nombre "TIMx_CHx PNx", donde: 
//      "TIMx" = Nombre de la Variable con su correspondiente N¬∫ de TIMer
//      "_CHy" = 'CHanel' con su correspondiente N¬∫ de Canal.
//      "PNx": "PAx" o "PBx" = donde "Nx" es el nombre del pin en M√≥dulo STM32
// TIM1 ‚Äî 4 canales (PWM avanzado: salidas complementarias, dead-time, etc.)
//		‚úîÔ∏è Especial para control de motores, drivers, o donde se requiera precisi√≥n de fase y sincronizaci√≥n
//		‚ö†Ô∏è Requiere cuidado en configuraci√≥n avanzada si se activan salidas complementarias (CH1N, CH2N...)
//		‚úîÔ∏è CH1N a CH3N (salidas invertidas) est√°n disponibles en pines alternativos (consultar RM0008 / pinout)
//  #define TIM1_CH1  PA8   // Salida PWM CH1
//  #define TIM1_CH2  PA9   // Salida PWM CH2
//  #define TIM1_CH3  PA10  // Salida PWM CH3
//  #define TIM1_CH4  PA11  // Salida PWM CH4
// TIM2 ‚Äî 4 canales (PWM o captura/compare)
//  #define TIM2_CH1  PA0   // Tambi√©n ADC_IN0
//  #define TIM2_CH2  PA1
//  #define TIM2_CH3  PA2
//  #define TIM2_CH4  PA3
// TIM3 ‚Äî 4 canales (ideal para PWM)
//  #define TIM3_CH1  PA6   // Tambi√©n SPI1_MISO
//  #define TIM3_CH2  PA7   // Tambi√©n SPI1_MOSI
//  #define TIM3_CH3  PB0
//  #define TIM3_CH4  PB1
// TIM4
// ‚ö†Ô∏è STM32F103C8T6 tambi√©n puede incluir TIM4 (consultar datasheet y variante de placa utilizada)
// NOTAS:
// ‚ö†Ô∏è - Estos pines pueden compartir funciones SPI, ADC o EXTI
// ‚ö†Ô∏è - Planificar uso para evitar conflictos
//
//
// "IB10"
// –ñ –ñ –ñ PROGRAMACI√ìN Y BOOTLOADER –ñ –ñ –ñ
// Este microcontrolador no utiliza "fuses" como los AVR ni los terminos ISP o ICSP.
// La configuraci√≥n de arranque se define mediante:
//  - Celdas de opci√≥n (Option Bytes) grabadas desde ST-Link o software dedicado.
// BOOT0 (pin BOOT0 del M√≥dulo) ‚Üí Selecciona modo de arranque (ver tabla de arranque):
//		conectado a BOOT0/PA15 del micro con R3=100KŒ© en algunos casos.
//		‚Ä¢ BOOT0 = 0 (LOW 0V) ‚Üí Arranque desde memoria Flash interna (modo normal)
//		‚Ä¢ BOOT0 = 1 (HIGH 3.3V) ‚Üí Arranque desde sistema de f√°brica (System Memory: USART1, DFU USB si est√° cargado)
// BOOT1 (pin BOOT1 del M√≥dulo) ‚Üí  Selecciona modo de arranque (ver tabla de arranque):
//		conectado a BOOT1/PB2 del micro con R4=100KŒ© en algunos casos.
//
// üß© Tabla de arranque (STM32F103)
//	| BOOT1 | BOOT0 | Modo de arranque                  | 
//	|   0   |   0   | Flash interna (modo normal)       | 
//	|   0   |   1   | System Memory (USART1, DFU, etc.) | 
//	|   1   |   0   | SRAM interna (debug)              | 
//	|   1   |   1   | SRAM interna (debug)              | 
//
// RESET  (pin NRST en micro) (pin 'R' en Modulo) ‚Üí Pin de reinicio del sistema (pull-up interno activo)
//
// NOTA:
// ‚Ä¢ Para programar con ST-Link: usar SWDIO y SWCLK (pines PA13 y PA14), BOOT0 = 0 o 1 NO importa
// ‚Ä¢ Para usar modo DFU por USB, se requiere cargar un bootloader compatible (ej.: Maple).
//   	Para activarlo: establecer BOOT0 = 1 antes del reset (BOOT desde System Memory).
// ‚Ä¢ Para arranque confiable, Conectar BOOT0 a GND mediante resistencia de 10KŒ© (pull-down externo recomendado)
// ‚ö†Ô∏è En Blue Pill, BOOT1 = 0 fijo ‚Üí Solo se manipula BOOT0 para cambiar el modo de arranque.
// ‚ö†Ô∏è En muchos m√≥dulos Blue Pill, R3 (BOOT0) est√° a GND, y R4 (BOOT1) tambi√©n a GND.
//		 Por eso ambos tienden a 0 al encender el sistema.
//
//
// "IB11"
// –ñ –ñ –ñ ALIMENTACI√ìN  –ñ –ñ –ñ
// Nombre	N¬∫ del pin del Modul	--> Funci√≥n									Tipo
// "G"   	pin  1					--> 0V o Tierra								Entrada o Salida
// "G"   	pin  2					--> 0V o Tierra								Entrada o Salida
// "Vbat"	pin 20					--> 3.3V de bateria de Back-Up o Stand-By	Entrada
// "3.3" 	pin 21					--> 3.3V									Entrada o Salida
// "G"   	pin 22					--> 0V o Tierra								Entrada o Salida
// "5V"  	pin 23					--> 5V desde USB							Salida
//
//
// "IB12"
// –ñ –ñ –ñ REFERENCIAS ADC INTERNA –ñ –ñ –ñ
// STM32F103 incluye referencias internas accesibles por software:
//   - VREFINT (~1.20‚ÄØV) ‚Üí canal ADC_IN17 (no expuesto f√≠sicamente)
//   - Sensor de temperatura ‚Üí canal ADC_IN16
// Recurrir a bibliograf√≠a sobre "VREFINT" (Referencia Interna de Voltaje)
// ‚ö†Ô∏è Requieren configuraci√≥n adicional del ADC para ser le√≠dos.
// üìö Ver documentaci√≥n oficial de STM32 o el Reference Manual (RM0008) secci√≥n ADC
//
//
//
//
// "IC00"
// –ñ –ñ –ñ –ñ –ñ ------- VARIABLES ------- –ñ –ñ –ñ –ñ –ñ
//
//
// "IC01"
// –ñ –ñ –ñ ----- OBJETO GLOBALES ----- –ñ –ñ –ñ
// Objetos de clase usados en todo el programa (LCD, RTC, sensores, etc.)
// Siempre primero.
// Son los m√≥dulos f√≠sicos del sistema embebido (LCD, sensores, EEPROM, etc.) y suelen tener constructores que se ejecutan al inicio.
// (lo siguiente son ejemplos, quizas falten y aclararlos mejor)
// Los siguientes son idelaes cuando solo lo usamos 1 vez o en en una repetitiva", imprimir en un display.
// String str01 = " CONTROL de DIR  ";  // Colocar Espacios adelante y atr√°s. MAXIMO 40 Caracteres"
// String str02 = " del BUS del I2C ";  // Ambos String deben tener la misma longitud.
// String str03 = "CAMBIAR Dir:";  // Para usar varias veces
// String msgDireccionIncorrecta = "CAMBIAR Dir:";  // Para usar varias veces (Igual al anterior, pero con nombre es mas f√°cil)
//
//
// "IC02"
// –ñ –ñ –ñ ----- ESCALARES GLOBALES ----- –ñ –ñ –ñ
// Variables primitivas (int, bool, unsigned long, etc.) con alcance global
// Usadas por varias subrutinas o para mantener estados (como ledState, millis() de control, flags de error, etc.).
bool NombreDeLaVariable = valor;                       // valor = false/true -- bits = 1 -- ¬ø%d? -- 
const int NombreDeLaVariable = valor;                  // valor = -32,768 a 32,767 -- ¬øSignificado cortisimo para recordarlo?
int NombreDeLaVariable_val = valor;                    // valor = -32,768 a 32,767 -- ¬øSignificado cortisimo para recordarlo?
unsigned long NombreDeLaVariable_val = valor;          // valor = 0 a 4,294,967,295 -- ¬øSignificado cortisimo para recordarlo?
// con modificador "static"
static bool NombreDeLaVariable = valor;                // valor = false/true -- ¬øSignificado cortisimo para recordarlo?
static unsigned long NombreDeLaVariable_val = valor;   // valor = 0 a 4,294,967,295 -- ¬øSignificado cortisimo para recordarlo?
//
//
// "IC03"
// –ñ –ñ –ñ ----- LISTAS ----- –ñ –ñ –ñ (puede cambiar)
// Arrays, buffers, cadenas fijas, listas de datos (char[], int[], etc.)
// Muy √∫til si manej√°s estructuras como:
// –ñ LISTA "NonbreDeLaLista01" (aclarar funcion)  –ñ
enum nombre {
    NonbreDeLaLista01_Abreviaci√≥n_01_DelNonbreAlQueCorrespondeElValor = Valor0,      // valor = 0 a 4,294,967,295
    NonbreDeLaLista01_Abreviaci√≥n_02_DelNonbreAlQueCorrespondeElValor = Valor0,      // valor = 0 a 4,294,967,295
    NonbreDeLaLista01_Abreviaci√≥n_xx_DelNonbreAlQueCorrespondeElValor = Valor0,      // valor = 0 a 4,294,967,295
//EJEMPLO:
//  ERR_pst = 3,      // PRESOSTATO mal funcionamiento
//  ERR_ven = 4,      // "VENTILACION" Activada
//  ERR_cal = 5,      // "CALEFACCION" Activada
//  ERR_nn14 = 14 o Mayores ¬°¬°NO se deben USAR!!
};
//
//
// "IC04"
// –ñ –ñ –ñ ----- Variables Flags y estados globales ----- –ñ –ñ –ñ
// Variables para manejo de errores, estados, alarmas, etc.
//
//
// "IC05"
// –ñ –ñ –ñ ----- Variables LOCALES ----- –ñ –ñ –ñ
// Declaradas dentro de funciones/subrutinas (en `setup()`, `loop()` o funciones propias)
// No se declaran globalmente, este se reserva para documentar d√≥nde y c√≥mo usarlas (por ejemplo, si us√°s muchas en loop() o setup()).
//
//
//
//
// "ID00"
// %& %& %& %& %& %& %& ------ CONSTANTES Y MACROS ------ %& %& %& %& %& %& %&
//    ID01 ‚Üí Constantes literales (const, #define)
//    ID02 ‚Üí Enumeraciones (enum)
//    ID03 ‚Üí Macros complejas
//
//
//
//
// "IE00"
// œ∏ œ∏ œ∏ œ∏ œ∏ œ∏ œ∏ ------- S U B R U T I N A S ------- œ∏ œ∏ œ∏ œ∏ œ∏ œ∏ œ∏ œ∏
//
// "IE01"
// œ∏ œ∏ œ∏ œ∏ œ∏ ----- S.R.: USO de " EEPROM " ----- œ∏ œ∏ œ∏ œ∏ œ∏
//
//
// "IE02"
// œ∏ œ∏ œ∏ œ∏ œ∏ ----- S.R. de USO  UNICO ----- œ∏ œ∏ œ∏ œ∏ œ∏
// Son aquellas que se corren una sola vez; lo general en "setup()" o son llamadas por √∫nica vez en loop().
//
// œ∏ œ∏ œ∏ SubRutina "NN01" œ∏ œ∏ œ∏
// versi√≥n y otros datos: 
// Aclarar funcionamiento: 
void SubrutinaUU_NN01() {
  // Aqu√≠ va el c√≥digo de ejecuci√≥n.
} // "FIN" SubrutinaUU_NN01
//
//
// "IE03"
// œ∏ œ∏ œ∏ œ∏ œ∏ ----- S.R.  en 2¬∫ PLANO PERMANENTES ----- œ∏ œ∏ œ∏ œ∏ œ∏
//
// œ∏ œ∏ œ∏ --- SubRutina "NN01" --- œ∏ œ∏ œ∏
// versi√≥n y otros datos
// Aclarar funcionamiento.
void Subrutina2PP_NN01() {
  // Aqu√≠ va el c√≥digo de ejecuci√≥n.
} // "FIN" Subrutina2PP_NN01
//
//
// "IE04"
// œ∏ œ∏ œ∏ œ∏ œ∏ ----- S.R.  en 2¬∫ PLANO NO PERMANENTES ----- œ∏ œ∏ œ∏ œ∏ œ∏
//
// œ∏ œ∏ œ∏ --- SubRutina "NN02" --- œ∏ œ∏ œ∏
// versi√≥n y otros datos
// Aclarar funcionamiento.
void Subrutina2PNP_NN01() {
// Aqu√≠ va el c√≥digo de ejecuci√≥n.
} // "FIN" œ∏Õ∞œ∏Õ∞ Subrutina2PNP_NN01 œ∏Àßœ∏Àß 
//
//
// "IE05"
// œ∏ œ∏ œ∏ œ∏ œ∏ ----- SUBRUTINAS de USO COMUN  ----- œ∏ œ∏ œ∏ œ∏ œ∏
//
// œ∏ œ∏ œ∏ --- SubRutina "NN03" --- œ∏ œ∏ œ∏
// versi√≥n y otros datos
// Aclarar funcionamiento.
void SubrutinaUC_NN03() {
 // Aqu√≠ va el c√≥digo de ejecuci√≥n.
} // "FIN" de SubrutinaUC_NN03, RETORNO a donde fue llamada esta SubRutina.
//
//
//
//
// "IF00"
// –î –î –î –î –î –î –î ------- setup() ------- –î –î –î –î –î –î 
//
void setup() {
//
// –î –î –î –î –î ----- CONFIGURACION INICIAL ----- –î –î –î –î –î
//
// –î –î –î Configuraci√≥n de los Pines como ENTRADAS –î –î –î
pinMode(NV_in1, INPUT);
pinMode(NV_inx, INPUT);
//
// –î –î –î Configuraci√≥n de los Pines como SALIDAS –î –î –î
pinMode(NV_out1, OUTPUT);
pinMode(NV_outx, OUTPUT);
//
// –î –î –î Asegurar el Estado inicial "SEGURO" de las SALIDAS –î –î –î
digitalWrite(NV_out1, LOW);      // Pone la salida en LOW (Ejemplo)
digitalWrite(NV_out2, HIGH);     // Pone la salida en HIGH (Ejemplo)
digitalWrite(NV_outx, LOW/HIGH); // Pone la salida en LOW/HIGH (elegir el estado m√°s conveniente)
//
// –î –î –î Comunicaci√≥n con el MONITOR ¬° ¬° ¬° O J O ! ! ! con los pines Rx y Tx –î –î –î
Serial.begin(Baud);                         // Elegir la velocidad de Rx/Tx
Serial.println(">> INICIO DEL SISTEMA <<"); // Mostrar√° en la pantalla del monitor o PC la leyenda que hay dentro de (".....")
Serial.println("Inicializando pines...");   // Mostrar√° en la pantalla del monitor o PC la leyenda que hay dentro de (".....")
//
// –î –î –î –î –î ----- OTRAS Configuraciones ----- –î –î –î –î –î
// "" Activa el watchdog con 2s de l√≠mite ""
// wdt_enable(WDTO_2S);
//
// –î –î –î --- SUBRUTINAS setup()--- –î –î –î
// Aqu√≠ se pueden agregar subrutinas de cualquier tipo.
//
}
//
//
//
//
// "IG00"
// ƒí ƒí ƒí ƒí ƒí ƒí ƒí ------- loop() ------- ∆é ∆é ∆é ∆é ∆é ∆é ∆é 
// ¬° ¬° ¬° Aqu√≠ se desarrolla el programa o sistema de control PRINCIPAL ! ! !
//
void loop() {
//
// Comandos pre-subrutinas
// Aqu√≠ van las subrutinas de cualquier tipo.
// Comandos post-subrutinas
//
//
} // "FIN" --- RETORNA a loop() ---
// NOTA Este espacio siempre debe estar al final ver "NOTA FINAL" en.,.....
//
``` // Estas comillas son usadas como final del testo copiado para ayuda con la IA
// "IH00"
//


